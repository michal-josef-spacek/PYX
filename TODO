TODO
====
25. Pridat kompatibilitu pro puvodni XML::PYX?.
31. Udelat konfiguraci, ktera bude platit pro vsechny skripty.
32. Skript check_xml. Vypise, jestli je to xml. Jestli jde validovat podle dtd 
    a podobne informace.
38. Implementovat to same jako SimpleXML
40. Testy pro handler 'rewrite' u PYX::Parser.
42. Skript na odstraneni komentaru.
46. Dedit tridy.
51. Do PYX::Parser dat osetreni open a close.
52. Prepsat PYX::Parser tak, aby tam byl podobne jako v XML::Parser parameter
    pro externi nastaveni objektu. Pak patri prepsat PYX::XMLNorm tak, aby se
    zrusily globalni parametery.
54. Prejmenovat end_tag a start_tag na end_element a start_elements.
55. Priklad v PYX::Parser upravit, aby to davalo smysl (output, argumenty)
56.

Applied
=======
6. Opravit Makefile.PL tak, aby binarka sla do /usr/local adresare.
Tohle se delat takhle: perl Makefile.PL PREFIX=/usr/local/
NONE [20050618] skim

2. Udelat testy na PYX::Utils.
OK [20050622] skim

9. Implementace pyx2xml pres Tags.
OK [20050622] skim

10. Implementace pyx2xml pres lame vystup. Viz puvodni pyx2.
OK [20050622] skim

12. Pridat zpracovani komentaru.
OK [20050626] skim

1. Udelat testy na PYX.
OK [20050626] skim

13. Upravy v PYX::Parser. Mel by se predavat do handleru vlastni objekt? Jako u
    Expatu? Co s tim prepisovanim?
Predava se i objekt. Pridana funkce, na prime vykresleni vstupu na vystup. A
moznost prepisovat vstup na vystup automaticky.
OK [20050702] skim

16. V PYX::Write::Raw udelat vystup do output_handler.
OK [20050702] skim

14. Testy pro PYX::Write::Raw.
OK [20050702] skim

15. Testy pro PYX::Write::Tags.
OK [20050702] skim

17. V PYX::Write::Tags udelat vystup do output_handler.
OK [20050703] skim

19. Udelat moznost prepisovat na vystup jine nez zakladani tagy.
Pridan handler, ktery resi ostatni. Pokud neni definovan, tak vyhodi chybu.
OK [20050703] skim

18. Testy pro PYX::Parser.
OK [20050703] skim

20. Doplnit testy pro 19).
OK [20050703] skim

23. Pro PYX::Write::Tags::Code udelat testy.
OK [20050713] skim

26. Napsat PYX::Write::Tags2.
OK [20050717] skim

28. Skript, ktery pretridi atributy v pyx formatu podle abecedy.
OK [20050718] skim

27. Dodelat testy pro PYXWriteTags2.
OK [20050718] skim

11. PYX.pm presunout do Tags::PYX.
OK [20050809] skim

29. Testy pro PYX::Sort.
OK [20050810] skim

35. Testy pro PYX::Stack.
OK [20050810] skim

33. V t/ udelat poradek po odstraneni PYX::Utils.
Spravilo se samo pridanim testu pro PYX::Sort a PYX::Stack.
OK [20050810] skim

3. Zkusit vymyslet implementaci parsovani pres HTML::TagReader. Viz pyx2.
Tohle tady neresim. Resim to v Tags::Parser. Tam je to tak udelane.
NONE [20050814] skim

4. Zkusit vymyslet implementaci parsovani pres XML::Parser. Viz puvodni pyx.
Tohle tady neresim. Resim to v Tags::Parser. Tohle nebudu delat.
NONE [20050814] skim

5. Zkusit vymyslet implementaci pres lame parsovani jako u stareho pyx.
Tohle tady neresim. Resim to v Tags::Parser. Tohle nebudu delat.
NONE [20050814] skim

37. Skript, ktery vyhodi bila mista v datovych tagach a bila mista na zacatku 
    a konci v datovem a komentarovem tagu.
OK [20050814] skim

36. Udelat asi PYX::XMLNorm pro doplnovani tagu, kdyz musi byt doplnene. 
    Jakasi normalizace na xml. napr: '<tr><td>neco</tr>'. Pred </tr> musi byt </td>.
OK [20050814] skim

41. Do pyx_optimalization pridat odstraneni \n v kodu, ktery neni preserve.
Bez osetreni preserve. To bude uloha 43.
OK [20050926] skim

39. Optimalizovat PYX::Parser pomoci _is_sub. Hlavne odzkouset.
OK [20050926] skim

21. Do PYX::Parser pridat parsovani souboru.
OK [20060217] skim

22. Do PYX::Parser pridat parsovani stringu primo funkci.
OK [20060217] skim

45. Predelat skripty tak, aby stdin se bral pomoci -.
OK [20060410] skim

47. PYX::GraphViz.
OK [20060911] skim

49. Chyba v PYX::XMLNorm, kdy tagy 'INPUT' se nevybiraji podle pravidel 'input'.
OK [20060918] skim

24. Pro PYX::Write::Tags::Code udelat dokumentaci.
OK [20090627] skim

7. Pokud bude komentar, tak umoznit jeho odstraneni. To by melo byt ve filterch.
Přesunuto do PYX-Filter.
NONE [20110526] skim

8. Nejak promyslet PYX::Filter;
Přesunuto do PYX-Filter.
NONE [20110526] skim

48. Testy pro PYX::GraphViz.
Přesunuto do PYX-GraphViz.
NONE [20110526] skim

50. Resit PYX::XMLNorm s flush.
    Mam vstup:
    (xml
    (gogo
    )xml
    Vystup normalne to dava:
    (xml
    (gogo
    )xml
    Vystup s flush stackem dava:
    (xml
    (gogo
    )xml
    )gogo
    )xml
    Coz je demence :)
Přesunuto do PYX-XMLNorm.
NONE [20110531] skim

34. Kdyz se testuje Vystup do Tags a Tags2, tak musi byt ty moduly 
    nainstalovane, jinak skip.
Tohle se tohoto modulu uz netyka. S tim, ze existuje 'BUILD_REQUIRES' v
Makefile.PL uz to neni potreba resit.
NONE [20110531] skim

53. Nastaveni XML normalizace pro html by mohlo byt v nejake knihovne.
Přesunuto do PYX-XMLNorm.
NONE [20110531] skim

30. Udelat skript pro zjisteni cetnosti.
    pyx_hist.pl?
Presunuto do PYX::Hist.
NONE [20140223] skim

43. PYX::Optimalization navazat na dtd (preserve).
Presunuto do PYX::Optimalization.
NONE [20140223] skim

44. Udelat skript pyx_sort pro setrideni celeho dokumentu. Pro testovani 
    stejnosti xml dokumentu.
Presunuto do PYX::Sort.
NONE [20140223] skim
