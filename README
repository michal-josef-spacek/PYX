NAME
    PYX - A perl module for PYX handling.

SYNOPSIS
     use PYX qw(attribute char comment end_tag instruction start_tag);
     my @data = attribute(@attr);
     my @data = char($char);
     my @data = comment($comment);
     my @data = end_tag($tag);
     my @data = instruction($target, $code);
     my @data = start_tag($tag, @attr);

SUBROUTINES
    "attribute(@attr)"
             Encode attribute as PYX.
             Returns array of encoded lines.

    "char($char)"
             Encode characters between elements as PYX.
             Returns array of encoded lines.

    "comment($comment)"
             Encode comment as PYX.
             Returns array of encoded lines.

    "end_tag($tag)"
             Encode end of element as PYX.
             Returns array of encoded lines.

    "instruction($target, $code)"
             Encode instruction as PYX.
             Returns array of encoded lines.

    "start_tag($tag, @attr)"
             Encode begin of element as PYX.
             Returns array of encoded lines.

EXAMPLE
     # Pragmas.
     use strict;
     use warnings;

     # Modules.
     use PYX qw(attribute char comment end_tag instruction start_tag);

     # Example output.
     my @data = (
             instruction('xml', 'foo'),
             start_tag('tag'),
             attribute('key', 'val'),
             comment('comment'),
             char('data'),
             end_tag('tag'),
     );

     # Print out.
     map { print $_."\n" } @data;

     # Output:
     # ?xml foo
     # (tag
     # Akey val
     # _comment
     # -data
     # )tag

DEPENDENCIES
    Exporter, PYX::Utils, Readonly.

SEE ALSO
    App::SGML2PYX, PYX::Checker, PYX::Filter, PYX::GraphViz,
    PYX::Optimalization, PYX::Parser, PYX::Sort, PYX::Stack, PYX::Utils,
    PYX::Write::Raw, PYX::Write::Tags, PYX::Write::Tags::Code, PYX::XMLNorm.

AUTHOR
    Michal Špaček skim@cpan.org.

LICENSE AND COPYRIGHT
    BSD 2-Clause License

VERSION
    0.01

